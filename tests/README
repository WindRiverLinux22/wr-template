This is simply a test layer for use by the wr-template layer.

Once you have added the wr-template layer per the wr-template README file, do
the following in order to test the functionality.

Banners:

In your local.conf file add:

CONFIG_BANNER[banner] = "This is a test of the CONFIG_BANNER"
BANNER[banner] = "This is a test of the runtime banner"

bitbake -c fetch bash

You should see both banners displayed.

bitbake -c fetch bash

You should only see the runtime banner displayed.

Processing Wind River templates files...
----------------------------------------------------------------------
This is a test of the CONFIG_BANNER
----------------------------------------------------------------------
Parsing recipes: 100% |#################################| Time: 0:00:03
...
----------------------------------------------------------------------
This is a test of the runtime banner
----------------------------------------------------------------------
Initialising tasks: 100% |#####################################################################################################| Time: 0:00:01
...

The generated 'README_config_notes' file should include the top banner
information.


Now add a FATAL_CONFIG_BANNER to the local.conf:

FATAL_CONFIG_BANNER[banner] = "This is a fatal build error message."

Now run bitbake -c fetch bash

You should see the following banner displayed, and the build stop.

ERROR: ----------------------------------------------------------------------
ERROR: This is a fatal build error message.
ERROR: ----------------------------------------------------------------------
ERROR: Template configuration errors -- terminating!

The file "README_config_failures" should also have been generated.

(before continuing with the next steps, remove the fatal banner from the
local.conf)


Default template:

In your bblayers.conf file, add wr-template/tests/layers1 to BBLAYERS.

such as:
BBLAYERS ?= " \
  /home/mhatle/git/oss/oe-core/meta \
  /home/mhatle/git/oss/oe-core/wr-template \
  /home/mhatle/git/oss/oe-core/wr-template/tests/layer1 \
  "

run bitbake -c fetch bash

Output should look like:
$ bitbake -c fetch bash
Processing Wind River templates files...
----------------------------------------------------------------------
Test - Layer1 default template has been included.
----------------------------------------------------------------------
....

The README_config_notes should include the above banner.

The README_templates should include two README files automatically
included by the layer.


Broken default layer:

In your bblayers.conf file, add wr-template/tests/layers2 to BBLAYERS.

Should look something like:

BBLAYERS ?= " \
  /home/mhatle/git/oss/oe-core/meta \
  /home/mhatle/git/oss/oe-core/wr-template \
  /home/mhatle/git/oss/oe-core/wr-template/tests/layer1 \
  /home/mhatle/git/oss/oe-core/wr-template/tests/layer2 \
  "

run bitbake -c fetch bash

You should see an error:

Processing Wind River templates files...
ERROR: Unable to find template ['feature/notfound'], required by /home/mhatle/git/oss/oe-core/wr-template/tests/layer2/templates/default.
ERROR: Aborting template processing.
ERROR: Error parsing configuration files
(and possibly a backtrace here...)


Disable bad default template:

Edit the conf/local.conf and add the following:

WRTEMPLATE_SKIP = "layer2/templates/default"

re-run the bitbake command

Parsing should complete, and skip the layer2 template.

Change the skip to:

WRTEMPLATE_SKIP = "feature/testtwo"

re-run the bitbake command

Output should now show the 'default' from layer2 was included, but without
the intentionally broken 'feature/testtwo' automatically included:

Processing Wind River templates files...
----------------------------------------------------------------------
Test - Layer1 default template has been included.

Test - Layer2 default template has been included.
----------------------------------------------------------------------

(order of above messages may be different)

The README_templates file will now include three files.


Recursive template inclusion:

(keep previous test's configuration)

Add to the local.conf:

WRTEMPLATE = "feature/testthree"

bitbake -c fetch bash

you should now see the following two messages added:

----------------------------------------------------------------------
You have included feature/testthree from layers2

You have included feature/testthree from layers1
----------------------------------------------------------------------

(order is not important)

looking in conf/wrtemplate.conf (order does matter), you should see (at the end):

#### /home/mhatle/git/oss/oe-core/wr-template/tests/layer2/templates/feature/testthree
WRTEMPLATE[mtimes] += "<path>(<timestamp>)"
CONFIG_BANNER[layers2_feature_testthree] = "You have included feature/testthree from layers2"

#### /home/mhatle/git/oss/oe-core/wr-template/tests/layer1/templates/feature/testthree
WRTEMPLATE[mtimes] += "<path>(<timestamp>)"
CONFIG_BANNER[layers1_feature_testthree] = "You have included feature/testthree from layers1"

Similarly the README_templates file, has added two entries at the end for the
feature/testthree templates.


Verify only the first template is included:

(re-use previous configuration)

Add the following to your local.conf:

WRTEMPLATE += "feature/testfour"


run bitbake -c fetch bash

In the config banners verify that you see:

-----
You have included feature/testfour from layers1
-----

In the conf/wrtemplate.conf you should see:

#### /home/mhatle/git/oss/oe-core/wr-template/tests/layer1/templates/feature/testfour
WRTEMPLATE[mtimes] += "<path>(<timestamp>)"
CONFIG_BANNER[layers1_feature_testfour] = "You have included feature/testfour from layers1"


You should NOT see a reference to 'testfour' in the 'layer2'.  (This would indicate a failure)


Verify that a template required in one layer, picks up a template from another (earlier) layer, and skips already defined:

(re-use previous configuration)

Add the following to your local.conf:

WRTEMPLATE += "feature/testfive"


run bitbake -c fetch bash

In the conf/wrtemplates.conf you should see the following added...

#### /home/mhatle/git/oss/oe-core/wr-template/tests/layer2/templates/feature/testfive

Otherwise everything else should be the same as the prior run.


Verify an alternative machine only updates the machine files:

(re-use previous configuration)

run MACHINE=qemuarm bitbake -c fetch bash

Look in the conf directory for the 'wr*' files.  You should notice the dates
and times of the two files with 'qemuarm' in them are newer then the other
files.

This shows the base template files were kept, and only the missing machine files
were updated.


General image modification:

(re-use previous configuration)

This test will build two test images, then add a template, and add an 'exception'
so that only one image gets the new code


run  bitbake test-image-one test-image-two

run  runqemu qemux86 test-image-one nographic
(to exit QEMU ctrl-a x)

(the system should boot, you can login as root)

run  runqemu qemux86 test-image-two nographic

(the system should boot, you can login as root)


Add the following to your local.conf (after any existing WRTEMPLATE entries):

WRTEMPLATE += "feature/target-toolchain"

WRTEMPLATE_IMAGE:pn-test-image-two = '0'

run  bitbake test-image-one test-image-two

run  runqemu qemux86 test-image-one nographic
login as root
gcc --version
(should return a version, not an error)
(exit qemu)

run  runqemu qemux86 test-image-two nographic
login as root
gcc --version
(should return an error, gcc: not found)
(exit qemu)
